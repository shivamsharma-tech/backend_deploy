// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// @id @@id @default @unique @@unique @@index @relation @map @@map @updatedAt @ignore @@ignore @@schema
// String Boolean Int BigInt Float Decimal DateTime Json Bytes Unsupported
// modifier [],?
// auto() autoincrement()  sequence() cuid() uuid() ulid() nanoid() now() dbgenerated(...)

model User {
  id             Int           @id @default(autoincrement())
  email          String        @unique
  name           String?
  age            Int?
  isActive       Boolean       @default(true)
  notification   Notification? @relation(fields: [notificationId], references: [id])
  blog           Blog[]
  intrest        String[]
  roleId         Int
  role           Role          @relation(fields: [roleId], references: [id])
  tokens         Token[]
  createAt       DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  notificationId String?
  password       String
}

model Token {
  id        Int      @id @default(autoincrement())
  value     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

enum UserRole {
  Admin
  User
}

model Video {
  id        String   @id @default(uuid())
  title     String   @db.Text
  url_720p  String   @map("720p")
  url_1080p String   @map("1080p")
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  phone     String   @db.Text
  email     String   @map("1080p")
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model Blog {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(255)
  content   String
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Book{
  id Int @id @default(autoincrement())
  title String
  description String
  image String?
  price Int
}